import "film_simulation.pkl"

class ConversionProfile {
    hidden application = "XRFC"
    hidden version = "1.12.0.0"
    propertyGroup: PropertyGroup
}

class PropertyGroup {
    hidden device: String   // e.g. "X100V"
    hidden version: String  // e.g. "X100V_0200"
    hidden label: String    // e.g. "Fujicolor Superia 800", must match filename, i.e. "$label.FP1"

    /// ConversionProfiles are tied to camera bodies and need a serial number to be used with X Raw Studio
    SerialNumber: String(length == 30)

    /// same as PropertyGroup.version, also sic: missing second i in "Conditon"
    TetherRAWConditonCode: String = version

    /// false in FP3 files. Custom union because of XML case-sensitivity
    Editable: *"TRUE"|"FALSE"

    /// source raw filename in FP3 data
    SourceFileName: String = ""

    /// Unknown when this is used, probably in FP3
    Fileerror: String = "NONE"

    /// may be enumerated (0, 90, 180)?
    RotationAngle: Int = 0

    /// need to verify if this applies to all bodies
    StructVer: Int = 65536

    /// IOPCode array
    IOPCode: IopCode

    /// not clear what this does
    ShootingCondition: *"OFF"|"ON"

    /// unclear if this can be set to anything else
    FileType: String = "JPG"

    /// Output JPEG size and aspect ratio
    ImageSize:
        *"L3x2"
        |"L16x9"
        |"L1x1"
        |"M3x2"
        |"M16x9"
        |"M1x1"
        |"S3x2"
        |"S16x9"
        |"S1x1"

    /// JPEG image quality
    ImageQuality: *"Fine"|"Normal"

    /// Push/pull processing
    ExposureBias: Thirds

    /// DR-Auto is a camera setting, not a conversion setting, and cannot be used here
    DynamicRange: Int(isValidDynamicRange) = 100

    /// D Range Priority: [Off, Weak, Strong] (cannot be set to Auto)
    WideDRange: *"0"|"P1"|"P2"
    FilmSimulation: film_simulation.FilmSimulation   // simulations are defined by the camera
    BlackImageTone: Int8 = 0         // Monochromatic Color WC (Warm/Cool) component. may be device-specific
    MonochromaticColor_RG: Int8 = 0  // Monochromatic Color MG (Magenta/Green) component
    GrainEffect: Strength = "OFF"
    GrainEffectSize: "LARGE"|*"SMALL"
    ChromeEffect: Strength = "OFF"     // Color Chrome Effect
    ColorChromeBlue: Strength = "OFF"  // Color Chrome FX Blue
    SmoothSkinEffect: "ON"|*"OFF"
    WbShootCond: "ON"|*"OFF"
    WhiteBalance:
        "Auto"           // Auto White Balance
        | "Custom1"      // Custom 1
        | "Custom2"      // Custom 2
        | "Custom3"      // Custom 3
        | "Temperature"  // Temperature
        | "Daylight"     // Daylight
        | "Shade"        // Shade
        | "FLight1"      // Fluorescent Light-1
        | "FLight2"      // Fluorescent Light-2
        | "FLight3"      // Fluorescent Light-3
        | "Incand"       // Incendescent
        | "UWater"       // Underwater
    WBShiftR: Int8
    WBShiftB: Int8
    WBColorTemp: WBColorTemp
    HighlightTone: Float
    ShadowTone: Float  // these were Ints up until the X-Trans V
    Color: Int8        // ignored with b&w
    Sharpness: Int8
    NoisReduction: Int8  // spelled as such
    Clarity: Int8
    LensModulationOpt: *"ON"|"OFF"
    ColorSpace: *"sRGB"|"AdobeRGB"
    HDR:  // any enabled mode disables DR, DR-P, Tone Curve, and Clarity
        *""
        | "200"
        | "400"
        | "800"
        | "800PLUS"
    DigitalTeleConv: "ON"|*"OFF"
    PortraitEnhancer: String = ""
}

const local isValidDynamicRange = (value) ->
    Set(100, 200, 400).contains(value)

/// A fractional value incremented in thirds.
/// The output format is /[PM]\dP\d\d/
/// P/M seems to indicate Plus or Minus. Zero is signed.
/// The first digit indicates whole stops, and the second digits indicate thirds in decimal.
///
/// ex.
/// M2P00 = -2
/// P1P67 = +1 2/3
class Thirds {
    // TODO string renderer
    wholeComponent: Int(isBetween(-2, 3)) = 0
    fraction: Int(isValidThird) = 0
}

const local isValidThird = (num) -> Set(0, 33, 67).contains(num)

class WBColorTemp {  // TODO string renderer (add K)
    value: Int(isBetween(2500, 10000), this % 10 == 0) = 10000
}

typealias Strength = "STRONG"|"WEAK"|"OFF"

/// bytearray containing color space, processor version, and other (unknown) options
/// AND with 0xFF000000 to get color space (FF = sRGB, FA = Adobe RGB)
/// AND with 0x00FFFF00 to get the processor version
typealias IopCode = // these are hex values but rendered as strings in xml
    "FF129502"    // sRGB, X-Processor Pro2: X-T2
    | "FF129504"  // sRGB, X-Processor Pro2: X100F
    | "FF129506"  // sRGB, X-Processor Pro2: X-H1
    | "FF159501"  // sRGB, X-Processor IV: X-T3
    | "FF159504"  // sRGB, X-Processor IV: X100V
    | "FF159505"  // sRGB, X-Processor IV: X-T4
    | "FA179502"  // Adobe RGB, X-Processor V: X-T5
