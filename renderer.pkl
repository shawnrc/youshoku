import "pkl:xml"

import* "./out/bw/*.pkl" as renderedRecipes
import "schemas/conversion_profile.pkl"
import "schemas/X100VRecipe.pkl"
import "schemas/film_simulation.pkl" as Simulations
import "schemas/whiteBalance.pkl" as whiteBalance

local _serialNumber = read("env:SERIAL_NUMBER")

recipes: Listing<conversion_profile.ConversionProfile> = new {
    for (recipe in renderedRecipes) {
        new conversion_profile.ConversionProfile {
            propertyGroup {
                device = "X100V"
                version = "X100V_0200"
                label = recipe.name
                SerialNumber = _serialNumber
                IOPCode = "FF159504"
                DynamicRange = if (recipe.dynamicRange.contains("Auto")) 100 else recipe.dynamicRange.drop(2).toInt()
                FilmSimulation = Simulations.lookup[recipe.filmSimulation]
                BlackImageTone = recipe.monochromaticColorWC
                MonochromaticColor_RG = recipe.monochromaticColorMG
                GrainEffect = recipe.grainEffect.toUpperCase()
                GrainEffectSize = recipe.grainSize.toUpperCase()
                ChromeEffect = recipe.colorChromeEffect.toUpperCase()
                ColorChromeBlue = recipe.colorChromeFxBlue.toUpperCase()
                WhiteBalance = whiteBalance.lookup[recipe.whiteBalance]
                WBColorTemp {
                    value = recipe.wbColorTemp ?? 10_000
                }
                WBShiftR = recipe.wbShiftRed
                WBShiftB = recipe.wbShiftBlue
                HighlightTone = recipe.highlight?.toFloat() ?? 0.0
                ShadowTone = recipe.shadow?.toFloat() ?? 0.0
                Color = recipe.color ?? 0
                Sharpness = recipe.sharpness
                NoisReduction = recipe.noiseReduction
                Clarity = recipe.clarity
            }
        }
    }
}

output {
    renderer = new xml.Renderer {
        converters {
            [conversion_profile.ConversionProfile] = (it) -> (xml.Element("ConversionProfile")) {
                attributes {
                    ["application"] = it.application
                    ["version"] = it.version
                }
                xml.Inline(it)
            }
            [conversion_profile.PropertyGroup] = (it) -> (xml.Element("PropertyGroup")) {
                attributes {
                    ["device"] = it.device
                    ["version"] = it.version
                    ["label"] = it.label
                }
                xml.Inline(it)
            }
            [conversion_profile.Thirds] = (it) -> (xml.Element("ExposureBias")) {
                "\(if (it.wholeComponent >= 0) "P" else "M")\(it.wholeComponent)P\(it.fraction.toString().padStart(2, "0"))"
            }
            [conversion_profile.WBColorTemp] = (it) -> (xml.Element("WBColorTemp")) { "\(it.value)K" }
        }
    }
}
